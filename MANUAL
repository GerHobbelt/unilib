UniLib: embeddable Unicode Library
Version 3.0.1-devel

Introduction
============

UniLib is an embeddable C++11 Unicode library under MPL 2.0 license
(http://www.mozilla.org/MPL/2.0/). It is versioned using Semantic Versioning
(http://semver.org/).

If currently offers:
- utf-8 and utf-16 encodings
- Unicode General Category info
- simple lowercasing, titlecasing and uppercasing
- Unicode normalization forms
- efficient stripping of combining marks

It is tested on the following compilers and platforms:
- Linux using gcc
- Windows using tdm-gcc
- Windows using Visual C++ 2013
- OS X using clang

Copyright 2015 Institute of Formal and Applied Linguistics, Faculty of
Mathematics and Physics, Charles University in Prague, Czech Republic.

UniLib repository http://github.com/ufal/unilib is hosted on GitHub.


API Reference
=============

The UniLib library is contained in ufal::unilib namespace. It consists of
several independent files, each containing a class with the same name. All
methods are thread-safe, unless stated otherwise.

The char32_t type represents Unicode code points and u32string type represents
sequences of Unicode code points. For UTF-8 the char and string types represent
code units and sequences of code units, for UTF-16 the char16_t and u16string
types are used to represent code units and sequence of code units.


Class unicode
-------------

  class ufal::unilib::unicode {
   public:
    typedef uint32_t category_t;

    enum : category_t {
      Lu, Ll, Lt, Lut = Lu | Lt, LC = Lu | Ll | Lt, Lm, Lo, L = Lu | Ll | Lt | Lm | Lo,
      Mn, Mc, Me, M = Mn | Mc | Me,
      Nd, Nl, No, N = Nd | Nl | No,
      Pc, Pd, Ps, Pe, Pi, Pf, Po, P = Pc | Pd | Ps | Pe | Pi | Pf | Po,
      Sm, Sc, Sk, So, S = Sm | Sc | Sk | So,
      Zs, Zl, Zp, Z = Zs | Zl | Zp,
      Cc, Cf, Cs, Co, Cn, C = Cc | Cf | Cs | Co | Cn
    };

    static inline category_t category(char32_t chr);

    static inline char32_t lowercase(char32_t chr);
    static inline char32_t uppercase(char32_t chr);
    static inline char32_t titlecase(char32_t chr);
  };

The unicode class contains basic information from Unicode Character Database
(http://www.unicode.org/reports/tr44/), notably:
- general categories
- simple uppercase/lowercase/titlecase mappings


unicode::category_t
-------------------

  typedef uint32_t category_t;

  enum : category_t {
    Lu, Ll, Lt, Lut = Lu | Lt, LC = Lu | Ll | Lt, Lm, Lo, L = Lu | Ll | Lt | Lm | Lo,
    Mn, Mc, Me, M = Mn | Mc | Me,
    Nd, Nl, No, N = Nd | Nl | No,
    Pc, Pd, Ps, Pe, Pi, Pf, Po, P = Pc | Pd | Ps | Pe | Pi | Pf | Po,
    Sm, Sc, Sk, So, S = Sm | Sc | Sk | So,
    Zs, Zl, Zp, Z = Zs | Zl | Zp,
    Cc, Cf, Cs, Co, Cn, C = Cc | Cf | Cs | Co | Cn
  };

The category_t type represents general category from Unicode Character Database
(http://www.unicode.org/reports/tr44/). Its values are:
- abbreviated property value aliases for general categories
- abbreviated aliases for groupings of related general categories, as listed in
  the Unicode Character Database (http://www.unicode.org/reports/tr44/).

Note that the category_t is a bitmask indicating general categories, which makes
it easy to define arbitrary subsets of general categories similarly to how
groupings of general categories are defined.


unicode::category
-----------------

  static inline category_t category(char32_t chr);

Returns general category of the given Unicode code point as a value of
category_t enumeration. The Cn category is returned for code points outside of
valid range.


unicode::lowercase()
--------------------

  static inline char32_t lowercase(char32_t chr);

Returns the simple lowercase mapping of the given code point from Unicode
Character Database (http://www.unicode.org/reports/tr44/). If no such mapping is
defined or the given code point is outside of valid range, the original code
point is returned.


unicode::uppercase()
--------------------

  static inline char32_t uppercase(char32_t chr);

Returns the simple uppercase mapping of the given code point from Unicode
Character Database (http://www.unicode.org/reports/tr44/). If no such mapping is
defined or the given code point is outside of valid range, the original code
point is returned.


unicode::titlecase()
--------------------

  static inline char32_t titlecase(char32_t chr);

Returns the simple titlecase mapping of the given code point from Unicode
Character Database (http://www.unicode.org/reports/tr44/). If no such mapping is
defined or the given code point is outside of valid range, the original code
point is returned.


Class uninorms
--------------

  class ufal::unilib::uninorms {
   public:
    static void nfc(std::u32string& str);
    static void nfd(std::u32string& str);
    static void nfkc(std::u32string& str);
    static void nfkd(std::u32string& str);
  };

The uninorms] class performs normalization to Unicode Normalization Forms
(http://unicode.org/reports/tr15/). All normalization forms are supported and
the normalization is performed inplace on u32string representing a string of
Unicode code points.


uninorms::nfc()
---------------

  static void nfc(std::u32string& str);

Convert given string to Normalization Form C
(http://unicode.org/reports/tr15/#Norm_Forms).


uninorms::nfd()
---------------

  static void nfd(std::u32string& str);

Convert given string to Normalization Form D
(http://unicode.org/reports/tr15/#Norm_Forms).


uninorms::nfkc()
----------------

  static void nfkc(std::u32string& str);

Convert given string to Normalization Form KC
(http://unicode.org/reports/tr15/#Norm_Forms).


uninorms::nfkd()
----------------

  static void nfkd(std::u32string& str);

Convert given string to Normalization Form KD
(http://unicode.org/reports/tr15/#Norm_Forms).


Class unistrip
--------------

  class ufal::unilib::unistrip {
   public:
    static inline bool is_combining_mark(char32_t chr);
    static inline char32_t strip_combining_marks(char32_t chr);
  };

The unistrip class performs combining marks stripping. The same functionality
can be achieved by combining unicode and uninorms class, but unistrip class
performs the task much faster and needs less embedded data.


unistrip::is_combining_mark()
-----------------------------

  static inline bool is_combining_mark(char32_t chr);

Returns true if the general category of given Unicode code point is M (i.e.,
nonspacing mark Mn or spacing mark Mc or enclosing mark Me).


unistrip::strip_combining_marks()
---------------------------------

  static inline char32_t strip_combining_marks(char32_t chr);

Returns Unicode code point which has all combining marks present in the given
code point removed. If the given code point is a combining mark itself, or there
are no combining marks present, strip_combining_marks returns the original code
point.

This method is equivalent to the following process:
- If the given code point is outside the valid Unicode range, return it.
- If the given code points has general category M, return it.
- Othervise, convert it to NFD.
- If there are no code points with general category M, return the original code
  points.
- Otherwise, remove all code points with general cagetory M.
- Convert the result to NFC.
- Return the resulting code point.


Class utf8
----------

  class ufal::unilib::utf8 {
   public:
    static bool valid(const char* str);
    static bool valid(const char* str, size_t len);
    static inline bool valid(const std::string& str);

    static inline char32_t decode(const char*& str);
    static inline char32_t decode(const char*& str, size_t& len);
    static inline char32_t first(const char* str);
    static inline char32_t first(const char* str, size_t len);
    static inline char32_t first(const std::string& str);

    static void decode(const char* str, std::u32string& decoded);
    static void decode(const char* str, size_t len, std::u32string& decoded);
    static inline void decode(const std::string& str, std::u32string& decoded);

    class string_decoder { public: class iterator; inline iterator begin(); inline iterator end(); };
    class buffer_decoder { public: class iterator; inline iterator begin(); inline iterator end(); };
    static inline string_decoder decoder(const char* str);
    static inline buffer_decoder decoder(const char* str, size_t len);
    static inline string_decoder decoder(const std::string& str);

    static inline void append(char*& str, char32_t chr);
    static inline void append(std::string& str, char32_t chr);
    static void encode(const std::u32string& str, std::string& encoded);

    template<class F> static void map(F f, const char* str, std::string& result);
    template<class F> static void map(F f, const char* str, size_t len, std::string& result);
    template<class F> static void map(F f, const std::string& str, std::string& result);
  };

The utf8 class deals with UTF-8 encoding. The char type is used to represent
UTF-8 code unit and string type is used to represented sequences of UTF-8 code
units.

The input UTF-8 strings can be either:
- const char*: C-style strings ended by '\0' code point.
- const char*, size_t: Buffers of given length which can contain '\0' code
  points.
- const string&: STL strings ended by '\0' code point.


utf8::valid()
-------------

  static bool valid (const char* str);
  static bool valid (const char* str, size_t len);
  static inline bool valid (const std::string& str);

Returns true if the given string is in valid UTF-8 encoding.


utf8::decode() character
------------------------

  static inline char32_t decode (const char*& str);
  static inline char32_t decode (const char*& str, size_t& len);

Decode one code point of given UTF-8 string and advance it.  If invalid UTF-8
encoding is found, ? is returned and the input string advances as little as
possible, so that no valid UTF-8 encoded code points are skipped.

If end of string is detected (len is zero in the buffer version, of *str is '\0'
in the c-style string version), '\0' is returned and the string is not advanced.


utf8::first()
-------------

  static inline char32_t first (const char* str);
  static inline char32_t first (const char* str, size_t len);
  static inline char32_t first (const std::string& str);

Returns the first Unicode code point in the input string. If len is zero in the
buffer version, '\0' is returned.


utf8::decode() string
---------------------

  static void decode (const char* str, std::u32string& decoded);
  static void decode (const char* str, size_t len, std::u32string& decoded);
  static inline void decode (const std::string& str, std::u32string& decoded);

Decode the whole given UTF-8 string to the resulting u32string.

The invalid UTF-8 encoding is handled as in the character version of decode(),
i.e. no valid UTF-8 code points are skipped and the invalid ones are replaced by
?.


utf8::string_decoder
--------------------

  class string_decoder { public: class iterator; inline iterator begin(); inline iterator end(); };

Helper class representing iterable view on UTF-8 encoded string.


utf8::buffer_decoder
--------------------

  class buffer_decoder { public: class iterator; inline iterator begin(); inline iterator end(); };

Helper class representing iterable view on UTF-8 encoded string.


utf8::decoder()
---------------

  static inline string_decoder decoder(const char* str);
  static inline buffer_decoder decoder(const char* str, size_t len);
  static inline string_decoder decoder(const std::string& str);

Returns an iterable object which iterates over Unicode code points of the input
UTF-8 encoded string.

It is supposed to be used like
  for (auto chr : utf8::decoder(str)) ...

Note that the iterable object is read-only, so although code points can be
assigned to the iterator, the assignment does not change the original string.


utf8::append()
--------------

  static inline void append (char*& str, char32_t chr);
  static inline void append (std::string& str, char32_t chr);

Encode given Unicode code point in UTF-8 encoding and append it to given string.


utf8::encode()
--------------

  static void encode (const std::u32string& str, std::string& encoded);

Encode given Unicode string in UTF-8 encoding.


utf8::map()
-----------

  template<class F> static void map (F f, const char* str, std::string& result);
  template<class F> static void map (F f, const char* str, size_t len, std::string& result);
  template<class F> static void map (F f, const std::string& str, std::string& result);

Given input UTF-8 encoded string, decode the Unicode code points (using decode),
apply the function f to every one of them, encode the resulting string back to
UTF-8 and store it to result.

These functions can be used for example to change case of Unicode code points:
  utf8::map(unicode::lowercase, input, output)


Class utf16
-----------

  class ufal::unilib::utf16 {
   public:
    static bool valid(const char16_t* str);
    static bool valid(const char16_t* str, size_t len);
    static inline bool valid(const std::u16string& str);

    static inline char32_t decode(const char16_t*& str);
    static inline char32_t decode(const char16_t*& str, size_t& len);
    static inline char32_t first(const char16_t* str);
    static inline char32_t first(const char16_t* str, size_t len);
    static inline char32_t first(const std::u16string& str);

    static void decode(const char16_t* str, std::u32string& decoded);
    static void decode(const char16_t* str, size_t len, std::u32string& decoded);
    static inline void decode(const std::u16string& str, std::u32string& decoded);

    class string_decoder { public: class iterator; inline iterator begin(); inline iterator end(); };
    class buffer_decoder { public: class iterator; inline iterator begin(); inline iterator end(); };
    static inline string_decoder decoder(const char16_t* str);
    static inline buffer_decoder decoder(const char16_t* str, size_t len);
    static inline string_decoder decoder(const std::u16string& str);

    static inline void append(char16_t*& str, char32_t chr);
    static inline void append(std::u16string& str, char32_t chr);
    static void encode(const std::u32string& str, std::u16string& encoded);

    template<class F> static void map(F f, const char16_t* str, std::u16string& result);
    template<class F> static void map(F f, const char16_t* str, size_t len, std::u16string& result);
    template<class F> static void map(F f, const std::u16string& str, std::u16string& result);
  };

The utf16 class is a direct analogue of utf8 class, but instead of UTF-8
encoding it deals with UTF-16 encoding.  The char16_t type is used to represent
UTF-16 code unit and u16string type is used to represented sequences of UTF-16
code units.

For method documentation, please see the utf8 class.


Structure version
-----------------

  struct version {
    unsigned major;
    unsigned minor;
    unsigned patch;
    std::string prerelease;

    // Returns current version.
    static version current();
  };

The version class represents UniLib version according to Semantic Versioning
(http://semver.org/).


version::current
----------------

  static version current();

Returns current Unilib version.
